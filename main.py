import asyncio
import uuid
from random import randint, choice
import structlog

from improved_logging.loggers import InitLoggers

logger: structlog.BoundLogger = structlog.getLogger(InitLoggers.main.name)

usernames = [
    "CyberNinja", "ShadowHunter", "QuantumLeap", "NeonBlaze", "PhantomRider", "SilverFox", "MysticWolf", "IronClad",
    "GoldenEagle", "CrimsonTide", "NightOwl", "StormChaser", "FrostByte", "DarkKnight", "SolarFlare", "OceanMaster",
    "ThunderBolt", "BlazeRunner", "SkyPirate", "LunarGhost", "SteelTitan", "VenomStrike", "ArcticWolf", "InfernoDragon",
    "CosmicDrift", "EchoFox", "RogueAgent", "PhoenixRise", "ShadowStalker", "IronWolf", "CrimsonBlade", "NightHawk",
    "StormRider", "FrostWolf", "DarkPhoenix", "SolarWind", "OceanRider", "ThunderWolf", "BlazeStorm", "SkyHunter",
    "LunarWolf", "SteelWolf", "VenomWolf", "ArcticFox", "InfernoWolf", "CosmicWolf", "EchoWolf", "RogueWolf"
]

product_names = [
    "–ö–æ—Å–º–µ—Ç–∏–∫–∞", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "–ö–Ω–∏–≥–∏", "–û–¥–µ–∂–¥–∞", "–ò–≥—Ä—É—à–∫–∏", "–ü—Ä–æ–¥—É–∫—Ç—ã", "–°–ø–æ—Ä—Ç—Ç–æ–≤–∞—Ä—ã", "–î–æ–º–∞—à–Ω—è—è —Ç–µ—Ö–Ω–∏–∫–∞",
    "–°–∞–¥–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞"
]

# üî• –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è user_id –ø–æ username
users_map = {}


async def simulate_user_session(username):
    """
    –°–∏–º—É–ª—è—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏.
    """
    # üî• –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —É –æ–¥–Ω–æ–≥–æ username –≤—Å–µ–≥–¥–∞ –æ–¥–∏–Ω user_id
    if username not in users_map:
        users_map[username] = randint(9999, 100000)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º user_id, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç

    user_id = users_map[username]  # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π user_id

    with structlog.contextvars.bound_contextvars(user_id=user_id, username=username, stream_id=str(uuid.uuid4())):
        logger.info(f"–Æ–∑–µ—Ä {username} –∑–∞—à–µ–ª –Ω–∞ —Å–∞–π—Ç", _event="login")

        num_events = randint(2, 6)
        for _ in range(num_events):
            await asyncio.sleep(randint(1, 10))
            _event = choice(["profile", "products", "view_product", "logout", "delete_account"])

            if _event == "profile":
                logger.info(f"–Æ–∑–µ—Ä {username} –ø–µ—Ä–µ—à–µ–ª –≤ –ø—Ä–æ—Ñ–∏–ª—å", _event="profile")
            elif _event == "products":
                logger.info(f"–Æ–∑–µ—Ä {username} –ø–µ—Ä–µ—à–µ–ª –≤ —Ç–æ–≤–∞—Ä—ã", _event="products")
            elif _event == "view_product":
                product = choice(product_names)
                logger.info(
                    f"–Æ–∑–µ—Ä {username} —Å–º–æ—Ç—Ä–∏—Ç —Ç–æ–≤–∞—Ä {product}",
                    user_id=user_id,
                    username=username,
                    _event="view_product",
                    product=product
                )
            elif _event == "logout":
                logger.info(f"–Æ–∑–µ—Ä {username} –≤—ã—à–µ–ª –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", _event="logout")
                return
            elif _event == "delete_account":
                logger.info(f"–Æ–∑–µ—Ä {username} —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç", _event="delete_account")
                return

        await asyncio.sleep(randint(1, 10))
        final_event = choice(["logout", "delete_account"])
        if final_event == "logout":
            logger.info(f"–Æ–∑–µ—Ä {username} –≤—ã—à–µ–ª –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", _event="logout")
        else:
            logger.info(f"–Æ–∑–µ—Ä {username} —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç", _event="delete_account")


async def main():
    tasks = []
    while True:
        await asyncio.sleep(randint(0, 3))
        username = choice(usernames)  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —é–∑–µ—Ä–∞
        task = asyncio.create_task(simulate_user_session(username))
        tasks.append(task)
        tasks = [t for t in tasks if not t.done()]


if __name__ == '__main__':
    InitLoggers()
    asyncio.run(main())
